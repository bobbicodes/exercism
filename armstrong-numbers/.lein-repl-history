(defn digits [n]
  (map #(Integer/parseInt (str %))  (seq (str n))))
(digits 1234)
(count (digits 1234))
(defn numdigits [n]
(count (digits n)))
(numdigits 1234)
(digits 356895)
(numdigits 35788547)
(defn multiplier [n]
  (* n (numdigits n)))
(multiplier 5)
(multiplier 55)
(doc reduce)
(doc map)
(defn mult [n] (map #(* (count (digits n)) n))) 
(mult (1 2 3 4))
(defn mult [n] (map * (count (digits n)) n))
(mult (1 2 3 4))
(defn mult [n] (* (count (digits n)) n))
(defn arm? [n]
 (= n (reduce + (map #(exp % (count (digits n)) (digits n))
)
(defn exp [x n]
  (reduce * (repeat n x)))
 (= n (reduce + (map #(exp % (count (digits n)) (digits n))
))
)
(defn arm? [n]
 (= n (reduce + (map #(exp % (count (digits n)) (digits n))
)
(arm? 153)
(digits 124)
(numdigits '(1 2 3))
(numdigits 1 2 3)
(numdigits 123)
(map #(exp % (numdigits 123) (digits 123)))
(digits 123)
(numdigits 123)
(exp 2 3)
(map #(exp % (digits 123) (numdigits 123)))
(numdigits 123)
(map #(int (exp % (numdigits 123) (digits 123))))
(numdigits 123)
(digits 123)
(map inc '(1 2 3))
(map exp '(1 2 3) 3)
(map exp 3 '(1 2 3))
(map #(exp '(1 2 3) 3)
)
(exp 2 3)
(map #(exp % '(1 2 3) 3)
)
(map #(exp % 3) '(1 2 3))
(map #(exp % (numdigits 123)) (digits 123))
(defn multiplier [n]
  (map #(exp % (numdigits n)) (digits n)))
(multiplier 145)
(defn adder [n]
  (reduce + (multiplier n))
)
(adder '(1 2 3))
(adder 123)
(defn armstrong? [n]
  (= (adder n) n))
(armstrong? 153)
(armstrong? 154)
